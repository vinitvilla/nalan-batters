// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  phone             String    @unique
  fullName          String
  addresses         Address[] @relation("UserAddresses")
  orders            Order[]
  defaultAddressId  String?   @unique
  defaultAddress    Address?  @relation("DefaultAddress", fields: [defaultAddressId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  cart              Cart?
  role              UserRole  @default(USER)
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation("UserAddresses", fields: [userId], references: [id])
  userId    String
  street    String
  unit      String?
  city      String
  province  String
  country   String
  postal    String
  orders    Order[]
  defaultForUser User? @relation("DefaultAddress")
  isDeleted Boolean   @default(false)
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Decimal   @db.Decimal(10,2)
  imageUrl    String?
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItems   CartItem[]
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
  items       OrderItem[]
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10,2)
  tax         Decimal?    @db.Decimal(10,2)
  convenienceCharges  Decimal?    @db.Decimal(10,2)
  deliveryCharges Decimal? @db.Decimal(10,2)
  discount    Decimal?    @db.Decimal(10,2)
  promoCode   PromoCode?  @relation(fields: [promoCodeId], references: [id])
  promoCodeId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveryDate DateTime?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10,2)
}

model PromoCode {
  id          String    @id @default(uuid())
  code        String    @unique
  discount    Decimal   @db.Decimal(5,2)
  discountType DiscountType @default(PERCENTAGE)
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  orders      Order[]
  expiresAt   DateTime?
}

enum DiscountType {
  PERCENTAGE
  VALUE
}

model Category {
  id    String   @id @default(uuid())
  name  String   @unique
  products Product[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Config {
  id        String   @id @default(uuid())
  title     String   @unique
  value     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeatureFlag {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
