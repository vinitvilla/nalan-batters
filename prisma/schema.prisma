generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  phone            String    @unique
  defaultAddressId String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  fullName         String
  role             UserRole  @default(USER)
  isDelete         Boolean   @default(false)
  addresses        Address[] @relation("UserAddresses")
  cart             Cart?
  orders           Order[]
  defaultAddress   Address?  @relation("DefaultAddress", fields: [defaultAddressId], references: [id])
}

model Address {
  id             String  @id @default(uuid())
  userId         String
  street         String
  unit           String?
  city           String
  province       String
  country        String
  postal         String
  isDeleted      Boolean @default(false)
  user           User    @relation("UserAddresses", fields: [userId], references: [id])
  orders         Order[]
  defaultForUser User?   @relation("DefaultAddress")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  stock       Int         @default(0)
  categoryId  String
  isDelete    Boolean     @default(false)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id                 String        @id @default(uuid())
  orderNumber        String        @unique @db.Char(5)
  userId             String
  addressId          String
  status             OrderStatus   @default(PENDING)
  total              Decimal       @db.Decimal(10, 2)
  promoCodeId        String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deliveryCharges    Decimal?      @db.Decimal(10, 2)
  discount           Decimal?      @db.Decimal(10, 2)
  tax                Decimal?      @db.Decimal(10, 2)
  deliveryDate       DateTime?
  convenienceCharges Decimal?      @db.Decimal(10, 2)
  isDelete           Boolean       @default(false)
  orderType          OrderType     @default(DELIVERY)
  paymentMethod      PaymentMethod @default(ONLINE)
  address            Address       @relation(fields: [addressId], references: [id])
  promoCode          PromoCode?    @relation(fields: [promoCodeId], references: [id])
  user               User          @relation(fields: [userId], references: [id])
  items              OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model PromoCode {
  id           String       @id @default(uuid())
  code         String       @unique
  discount     Decimal      @db.Decimal(5, 2)
  isActive     Boolean      @default(true)
  expiresAt    DateTime?
  discountType DiscountType @default(PERCENTAGE)
  isDeleted    Boolean      @default(false)
  orders       Order[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  isDelete Boolean   @default(false)
  products Product[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Config {
  id        String   @id @default(uuid())
  title     String   @unique
  value     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDelete  Boolean  @default(false)
}

model FeatureFlag {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String        @id @default(uuid())
  name      String
  mobile    String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isDelete  Boolean       @default(false)
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
}

enum DiscountType {
  PERCENTAGE
  VALUE
}

enum ContactStatus {
  NEW
  READ
  INPROGRESS
  RESOLVED
}
